@using TechnikumPracticeDepartment.Models.ModelsDistributionStudentsPages
@model DistributionStudentsPageModel
<link rel="stylesheet" type="text/css" href="~/css/admin/cadri.css?version=3">
<link rel="stylesheet" type="text/css" href="~/css/select.css">
<link rel="stylesheet" type="text/css" href="~/css/admin/addEdit.css?version=0.3">
<link rel="stylesheet" type="text/css" href="~/css/warning.css">
<link rel="stylesheet" type="text/css" href="~/css/checkbox.css">
<script src="~/lib/jquery-validation/dist/jquery.validate.min.js"></script>
<script src="~/lib/jquery-validation-unobtrusive/jquery.validate.unobtrusive.min.js"></script>
<script src="~/lib/jQuery-Mask-Plugin-master/dist/jquery.mask.js"></script>
<script src="https://cdn.jsdelivr.net/gh/AmagiTech/JSLoader/amagiloader.js"></script>
<script src="https://snipp.ru/cdn/microplugin.js/src/microplugin.js"></script>
<script src="https://snipp.ru/cdn/sifter.js/sifter.min.js"></script>
<script src="https://snipp.ru/cdn/selectize.js/0.12.6/dist/js/selectize.min.js"></script>
<link href="https://snipp.ru/cdn/selectize.js/0.12.6/dist/css/selectize.default.css" rel="stylesheet" />

<style>
    .information_div > div > div > div:not(:last-child) {
        width: 500px !important;
    }
    .table_container{
        overflow: auto;
        width: 81vw;
        height: 40vw;
    }

    @@media (max-width: 1024px) {
        .table_container {
            height: 50vw;
        }
    }
    
    @@media (max-width: 768px) {
        .table_container {
            height: 70vw;
            width: 83vw !important;
        }
        tr{
            font-size: 10px;
        }
    }

    @@media (max-width: 550px) {
        .table_container {
            height: 85vw;
            width: 83vw !important;
        }
    }

    @@media (max-width: 450px) {
        .table_container {
            height: 95vw;
            width: 83vw !important;
        }
    }

    table td:first-child {
	    position:sticky;
	    left:0;
        background: #dddfe1;
        z-index: 2;
	    /*border-right-color:#aaa;*/
    }

    .rtable{
        color: black;
    }

    .notification {
      position: fixed;
      top: 0.5rem;
      right: 1rem;
        z-index: 15;
      /* align the content to the rigth */
      display: flex;
      flex-direction: column;
      align-items: flex-end;
      color: hsl(0, 0%, 20%);
      /* hide the overflow to conceal the message when translated to the right of the container */
      overflow-x: hidden;
      /* padding to avoid cropping the box-shadow on the message */
      padding: 0.25rem;
    }

    /* reduce the size of the icon and give a white fill to the elements of the graphic */
    .notification__bell {
      display: block;
      width: 48px;
      height: auto;
      fill: hsl(0, 0%, 100%);
    }
    .notification.received .bell__body {
      animation: swingBody 0.7s 0.02s cubic-bezier(0.455, 0.03, 0.515, 0.955);
    }
    .notification.received .bell__clapper {
      animation: swingClapper 0.7s 0.04s cubic-bezier(0.455, 0.03, 0.515, 0.955);
    }
    @@keyframes swingBody {
      25% {
        transform: rotate(-5deg);
      }
      75% {
        transform: rotate(5deg);
      }
    }
    @@keyframes swingClapper {
      5% {
        transform: rotate(0deg);
      }
      30% {
        transform: rotate(-8deg);
      }
      80% {
        transform: rotate(8deg);
      }
    }

    /* style the content of the message to show a grid with the dismiss button in the top right corner
    |h1  |  button |
    |p   |p        |
    */
    .notification__message {
      display: grid;
      grid-gap: 0.2rem;
      grid-template-columns: 1fr auto;
      padding: 0.5rem 1rem;
      margin: 1rem 0;
      /* style the div as a rounded rectangle with a border on the left segment */
      background: hsl(0, 0%, 100%);
      border-radius: 10px;
      box-shadow: 0 0 5px hsla(0, 0%, 0%, 0.1), 0 2px 3px hsla(0, 0%, 0%, 0.1);
      border-left: 0.5rem solid hsl(0, 0%, 100%);
      /* by default hide the element from sight and include a transition for the chosen properties */
      transform: translateX(100%);
      opacity: 0;
      visibility: hidden;
      transition-property: transform, opacity, visibility;
      transition-duration: 0.7s;
      transition-timing-function: cubic-bezier(0.445, 0.05, 0.55, 0.95);
    }
    .notification__message h1 {
      font-size: 1.1rem;
      font-weight: 500;
      text-transform: capitalize;
    }
    .notification__message p {
      max-width: 320px;
      font-size: 0.8rem;
      grid-column: 1/-1;
    }
    .notification__message button {
      background: none;
      border: none;
      color: inherit;
      width: 20px;
      height: 20px;
      grid-column: 2/3;
      grid-row: 1/2;
      align-self: center;
    }
    .notification__message button svg {
      display: block;
      width: 100%;
      height: 100%;
    }

    /* when the .notification container has a class of .received transition the message into view */
    .notification.received .notification__message {
      transform: translateX(0%);
      opacity: 1;
      visibility: visible;
    }
    /* change the border color according to the different modifiers
    ! for each modifier specify also an svg icon in the background, to highlight the message
    */
    .message--info {
      border-left-color: #90dee9;
      background: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><circle stroke="none" fill="%2390dee9" cx="50" cy="22" r="8"></circle><path fill="none" stroke="%2390dee9" stroke-width="12" stroke-linejoin="round" stroke-linecap="round" d="M 45 40 h 5 v 40 h -5 h 10"></path></svg>'),
        hsl(0, 0%, 100%);
      background-repeat: no-repeat;
      background-size: 35px;
      background-position: 100% 100%;
    }
    .message--success {
      border-left-color: hsl(120, 67%, 74%);
      background: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><path fill="none" stroke="%2390e990" stroke-width="12" stroke-linejoin="round" stroke-linecap="round" d="M 20 52 l 25 25 l 30 -50"></path></svg>'),
        hsl(0, 0%, 100%);
      background-repeat: no-repeat;
      background-size: 35px;
      background-position: 100% 100%;
    }
    .message--warning {
      border-left-color: hsl(54, 67%, 74%);
      background: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><path fill="none" stroke="%23e9e090" stroke-width="12" stroke-linejoin="round" stroke-linecap="round" d="M 50 18 v 40"></path><circle stroke="none" fill="%23e9e090" cx="50" cy="78" r="8"></circle></svg>'),
        hsl(0, 0%, 100%);
      background-repeat: no-repeat;
      background-size: 35px;
      background-position: 100% 100%;
    }
    .message--danger {
      border-left-color: hsl(0, 67%, 74%);
      background: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><g transform="translate(50 50) rotate(45)"><path fill="none" stroke="%23e99090" stroke-width="12" stroke-linejoin="round" stroke-linecap="round" d="M 0 -30 v 60 z M -30 0 h 60"></path></g></svg>'),
        hsl(0, 0%, 100%);
      background-repeat: no-repeat;
      background-size: 35px;
      background-position: 100% 100%;
    }
</style>
<div class="main">
    <div id="modDialog" class="modal fade">
        <div id="dialogContent" class="modal-dialog"></div>
    </div>
    <div class="left-menu-main">
        <h2 id="date-day">17</h2>
        <h2 id="date-mont">Сентябрь</h2>
        <span id="date-year">2022</span>
        <div class="left_men"></div>
    </div>
    <div class="right_menu">
        <div class="main_block">
            <div class="notification">
                <div class="notification__message message--info">
                    <h1>Info</h1>
                    <p>Lorem ipsum dolor sit amet consectetur adipisicing.</p>
                    <button aria-labelledby="button-dismiss">
                        <span id="button-dismiss" hidden>Dismiss</span>
                        <svg viewBox="0 0 100 100" width="10" height="10">
                            <g stroke="currentColor"
                               stroke-width="6"
                               stroke-linecap="round"
                               stroke-linejoin="round"
                               fill="none">
                                <g transform="translate(50 50) rotate(45)">
                                    <path d="M 0 -30 v 60 z M -30 0 h 60">
                                    </path>
                                </g>
                            </g>
                        </svg>
                    </button>
                </div>
            </div>
            <div class="top_panel"><p class="employees_title">Распределение студентов группы @Model.GroupName</p></div>
            <hr class="hr_style" size="1px" noshade>
            <div class="table_container">
                <table class="rtable">
                    <tr style="position: sticky;top: 0;background: #dddfe1; z-index:3;">
                        <th style="min-width:180px;">ФИО студента</th>
                        @foreach(var a in Model.list_practice)
                        {
                            <th>
                                <p>@a.NamePractice</p>
                                @foreach(var j in a.list_dates.OrderBy(p=>p.DateEnd).ToList())
                                {
                                    <p>С @j.DateStart.ToShortDateString() по @j.DateEnd.ToShortDateString()</p>
                                }
                            </th>
                        }
                    </tr>
                    @for(int i =0; i<Model.list_students.Count();i++)
                    {
                        <tr>
                            <td>
                                <p>@Model.list_students[i].User.SurnameUser @(@Model.list_students[i].User.NameUser[0].ToString()). @if(Model.list_students[i].User.PatronymicNameUser != null){<text>@(@Model.list_students[i].User.PatronymicNameUser[0].ToString()).</text>}</p>
                            </td>
                            @for(int j = 0; j<Model.list_practice.Count(); j++)
                            {
                                <td style="text-align: center;">
                                    <select class="js-chosen" @if(Model.list_practice[j].IsEnded == true && User.IsInRole("Администратор") == false){<text>disabled</text>} onchange="raspredelenie(@Model.list_practice[j].ID_Practice,@Model.list_students[i].IdStudent, this)">
                                        <option value="0">Не распределён</option>
                                        @foreach (var k in Model.list_organization)
                                        {
                                            @if(Model.list_practice[j].list_distributesStudents.Where(p=>p.PracticeId == Model.list_practice[j].ID_Practice && p.StudentId == Model.list_students[i].IdStudent).Count() > 0)
                                            {
                                                @if (Model.list_practice[j].list_distributesStudents.Where(p => p.PracticeId == Model.list_practice[j].ID_Practice && p.StudentId == Model.list_students[i].IdStudent && p.OrganizationId == k.IdOrganization).Count() > 0)
                                                {
                                                    <option selected value="@k.IdOrganization">@k.NotFullNameOrganization</option>
                                                }
                                                else
                                                {
                                                    <option value="@k.IdOrganization">@k.NotFullNameOrganization</option>
                                                }
                                            }
                                            else
                                            {
                                                <option value="@k.IdOrganization">@k.NotFullNameOrganization</option>
                                            }
                                        }
                                    </select>
                                </td>
                            }
                        </tr>
                    }
                </table>
            </div>
            <p style="color: black; font-style: italic; margin-top: 10px;">При необхоимости смены базы практики у закончившихся практик необходимо обратиться к адмнистратору</p>
            <div>
                <hr class="hr_style" size="1px" style="margin-top: 20px;" noshade>
                <div style="display: flex; margin-top: 20px; margin-left: 10px;">
                    <a class="btn" style="cursor: pointer;" asp-action="Index" asp-controller="PracticeDistribution">
                        <p>Назад</p>
                    </a>
                </div>
            </div>
        </div>
    </div>
</div>
<script type="text/javascript">
    $('.left_men').load('@Url.Action("LeftMenuPractice", "Additional")?index=3');
    $(document).ready(function () {
        $('.js-chosen').selectize();
    });

    function raspredelenie(id_practice, id_student, organization_id){
        if(organization_id.value != ""){
            AmagiLoader.show();
            dismissMessage();
            $.ajaxSetup({ cache: false });
            $.ajax({
                url: '/PracticeDistribution/ChangeDistributionStudent?ID_Practice=' + id_practice + '&ID_Student=' + id_student + '&ID_Organization='+organization_id.value,          /* Куда пойдет запрос */
                method: 'post',
                success: function (data) { 
                    AmagiLoader.hide();
                    if(data == true){
                        const title = "Успех";
                        const text = "Выбранный студент успешно распределён на практику";
                        const message = document.querySelector('.notification__message');
                        message.querySelector('h1').textContent = title;
                        message.querySelector('p').textContent = text;
                        message.className = `notification__message message--${title}`;
                        showMessage();
                        const timeoutID = setTimeout(() => {
                            dismissMessage();
                            clearTimeout(timeoutID);
                        }, 2000);
                    }
                    else{
                        const title = "ОШИБКА";
                        const text = "Произошла непредвиденная ошибка, студент не распределён!";
                        const message = document.querySelector('.notification__message');
                        message.querySelector('h1').textContent = title;
                        message.querySelector('p').textContent = text;
                        message.className = `notification__message message--${title}`;
                        showMessage();
                        const timeoutID = setTimeout(() => {
                            dismissMessage();
                            clearTimeout(timeoutID);
                        }, 2000);
                    }
                },
                error: function (data){
                    AmagiLoader.hide();
                    const title = "ОШИБКА";
                    const text = "Произошла непредвиденная ошибка, студент не распределён!";
                    const message = document.querySelector('.notification__message');
                    message.querySelector('h1').textContent = title;
                    message.querySelector('p').textContent = text;
                    message.className = `notification__message message--${title}`;
                    showMessage();
                    const timeoutID = setTimeout(() => {
                        dismissMessage();
                        clearTimeout(timeoutID);
                    }, 2000);
                }
            });
        }
    }

    const notification = document.querySelector('.notification');

    function dismissMessage() {
        notification.classList.remove('received');
    }

    function showMessage() {
        notification.classList.add('received');
        const button = document.querySelector('.notification__message button');
        button.addEventListener('click', dismissMessage, { once: true });
    }
</script>
<script type="text/javascript" src="~/js/addEdit.js?version=0.5"></script>
<script type="text/javascript" src="~/js/select.js"></script>
